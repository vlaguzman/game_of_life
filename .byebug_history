continue
spaces.inject(0){|sum, pair| @the_grid[pair[0], pair[1]].nil? ? sum + 0 : (@the_grid[pair[0], pair[1]] == "occupied" ? sum + 1 : sum + 0) }
spaces
spaces.inject(0){|sum, pair| sum + pair[1]}
spaces.inject(0){|sum, pair| sum + pair[0]}
pair
next
@the_grid[pair[0], pair[1]] == "occupied"
@the_grid[pair[0], pair[1]].nil? ? 0 : (@the_grid[pair[0], pair[1]] == "occupied" ? sum + 1 : 0)
step
spaces
spaces.inject(0){|sum, pair| @the_grid[pair[0], pair[1]].nil? ? 0 : (@the_grid[pair[0], pair[1]] == "occupied" ? sum +=1 : 0) }
continue
spaces.inject(0){|sum, pair| @the_grid[pair[0], pair[1]].nil? ? 0 : (@the_grid[pair[0], pair[1]] == "occupied" ? sum +=1 : 0) }
continue
continu
(@the_grid[pair[0], pair[1]] == "occupied" ? 1 : 0)
pair
air
step
spaces.inject(0){|sum, pair| @the_grid[pair[0], pair[1]].nil? ? 0 : (@the_grid[pair[0], pair[1]] == "occupied" ? 1 : 0) }
pos_x
pos_y
spaces
continue
@the_grid[4, 0]
spaces.delete_if{|val| val[0]<0 || val[1]<0}
spaces << [1, -1]
spaces
spaces.delete_if{|val| val[0]<0}
spaces
@the_grid[-1, 0]
pair[1]
pair[0]
@the_grid[pair[0], pair[1]]
pair[0],
@the_grid[pair[0], pair[1]]
pair
continue
val
next
spaces
pos_x
pos_y
continue
neighboring_spaces(pos_y, pos_x)
continue
neighboring_spaces(pos_y, pos_x)
continue
is_valid?(pos_y-1, pos_x+1)
is_valid?(pos_y-1, pos_x-1)
if is_valid?(pos_y-1, pos_x+1)
is_valid?(pos_y-1, pos_x)
[pos_y-1, pos_x-1]
is_valid?(pos_y-1, pos_x-1)
continue
neighboring_spaces(3, 3)
neighboring_cells(3, 3)
@the_grid.neighboring_cells(3, 3)
@the_grid[3, 3]
pos_x
pos_y
continue
neighboring_cells(pos_y, pos_x)
@the_grid[0, 1]
pos_x
pos_y
@the_grid[1, 0]
@the_grid
continue
@the_grid[1,0]
@the_grid[0,0]
continue
@the_grid[2,3]
@the_grid[1,0]
@the_grid[0,1]
pair
@the_grid[0,1]
@the_grid[0,0]
@the_grid[0,1]
@the_grid[0]
@the_grid
pair
continue
pair
continue
continur
 RESPONSE_VALUES[@the_grid[pos_x, pos_y].to_sym][5]
 RESPONSE_VALUES[@the_grid[pos_x, pos_y].to_sym]
neighboring_cells(pos_x, pos_y)
continue
next
RESPONSE_VALUES[@the_grid[pos_x, pos_y].to_sym][neighboring_cells(pos_x, pos_y)]
RESPONSE_VALUES[@the_grid[pos_x, pos_y].to_sym]
@the_grid[pos_x, pos_y]
@the_grid
